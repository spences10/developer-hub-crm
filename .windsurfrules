# SvelteKit & Svelte 5 Development Guidelines

## General Code Style & Formatting

- Use TypeScript for all files (`.svelte`, `.ts`)
- Use snake_case for variable and function names
- Use kebab-case for file names, including Svelte components
- Use tabs for indentation with a display width of 2 spaces
- Prefer arrow functions where possible
- Follow Prettier settings: singleQuote, useTabs, no semi, trailingComma

## Svelte 5 Core Concepts

### Reactive State Management

- Use runes for reactivity management:
  - `$state` for reactive variables
  - `$derived` for computed values
  - `$effect` for side effects
  - `$props` for component props
- Use `$state.raw` for large arrays/objects that don't need deep reactivity
- Use `$derived.by` for complex derivations with multiple dependencies
- Use `$effect.pre` for code that needs to run before DOM updates

### Global State Management

- Avoid direct export of reactive state variables
- For simple global state, use class-based approaches:
  ```javascript
  // state.svelte.js
  class Counter {
  	value = $state(0);
  }
  export const counter = new Counter();
  ```
- For isomorphic apps (SvelteKit):
  - Use `event.locals` for server-side global state
  - Use Svelte context for client-side global state

### Snippets

- Use snippets for reusable markup within and across components
- Use `#snippet` to define and `@render` to invoke a snippet

### Event Handling

- Use property-style event handlers instead of `on:` directive
- Use function shorthand for handlers when possible

## SvelteKit 2 Best Practices

### Routing & Page Structure

- Organize routes in the `src/routes` directory following SvelteKit conventions
- Use route groups (parentheses) to organize related routes
- Keep page components focused on presentation

### Data Fetching

- Always use `async/await` with arrow function load functions:
  ```javascript
  export const load = async ({ fetch }) => {
  	const response = await fetch('/api/data');
  	const data = await response.json();
  	return { data };
  };
  ```
- For multiple async operations, use `Promise.all`

### Error & Redirect Handling

- In SvelteKit 2, don't throw errors or redirects, just call them with arrow functions
- Use `isHttpError` and `isRedirect` to distinguish between errors

### Form Handling

- Use SvelteKit's form actions for server-side form processing
- Always specify `enctype="multipart/form-data"` for forms with file inputs
- Use the `use:enhance` directive with updated callback parameters

### Cookies

- Always specify a path when setting cookies in SvelteKit 2:
  ```javascript
  cookies.set('name', 'value', { path: '/' });
  ```

## Project Structure

- `/src`
  - `/lib` - Reusable code, utilities, and components
  - `/routes` - All application routes following SvelteKit conventions
  - `/app.html` - HTML template
  - `/hooks.server.ts` - Server hooks
  - `/hooks.client.ts` - Client hooks

## Styling & UI

- Use Tailwind CSS v4 for styling
- Use DaisyUI v5 for component styling

## TypeScript Integration

- Type component props properly with `$props` and generics
- Use type definitions for snippets

## Client-Side Fetch Best Practices

- Avoid client-side fetch operations when possible
- Prefer server-side data loading using load functions
- For authenticated data needs, use server load functions
- For realtime data, use SSE, WebSockets, or incremental loading

## Performance Optimization

- Minimize component re-renders by using `$derived` efficiently
- Use `$effect` with care, especially for expensive operations
- Leverage SvelteKit's server-side rendering capabilities
- Use `$state.raw` for large data structures that don't need deep reactivity

## Testing

- Write unit tests for utility functions and components
- Use Playwright for end-to-end testing
- Test both client and server-side functionality

## Development Environment

- Use Windsurf for WSL development (preferred over Cursor)
- Refer to setup guide: https://scottspence.com/posts/windsurf-setup-for-wsl
